name: Flask CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write
  actions: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools postgresql-client

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          sleep 5
          timeout 90 bash -c 'until pg_isready -h localhost -p 5432 -U testuser; do sleep 3; done'
          echo "‚úÖ PostgreSQL is ready!"
          
          echo "Waiting for Redis..."
          timeout 90 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 3; done'
          echo "‚úÖ Redis is ready!"

      - name: Run tests with coverage
        run: |
          export PYTHONPATH=.
          export DATABASE_URL="postgresql://testuser:testpass@localhost:5432/testdb"
          export REDIS_URL="redis://localhost:6379"
          export FLASK_ENV=testing
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
        env:
          SECRET_KEY: test-secret-key

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-xml
          path: coverage.xml

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker metadata
        id: meta
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/${REPO_LOWER}"
          TAGS="${IMAGE_NAME}:sha-${{ github.sha }}"
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            TAGS="${TAGS},${IMAGE_NAME}:latest"
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            TAGS="${TAGS},${IMAGE_NAME}:develop"
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Tags: ${TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.image_name }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
      - name: Print summary
        run: |
          echo "=== üéØ Pipeline Summary ==="
          echo "‚úì Test: ${{ needs.test.result }}"
          echo "‚úì Build: ${{ needs.build.result }}"
          echo "=========================="
